
input {
  beats {
    port => 5044
    host => "0.0.0.0" # specify host whitelist
    add_field => {"application" => "log-generator"}
    id => "input_beats"
  }   
}

filter {
  if [application] == "log-generator" {
    grok {
      patterns_dir => ["logs-test/patterns"]
      # field to parse
      match => {"message" => [
        "%{COMMON_LOG} %{WORD:type}\|%{NUMBER:status:int}\|%{USERNAME:user}\|%{IP:ip}",
        "%%{COMMON_LOG} %{WORD:type}\|%{NUMBER:duration:float}\|%{DATA:action}\|%{WORD:status:int}\|%{USERNAME:user}",
        "(?m)%{COMMON_LOG} %{DATA:error_message}\|%{GREEDYDATA:stacktrace}"
        ]
      }
      id => "log-generator-grok"
    }

    mutate {
      remove_field => ["message", "input", "prospector", "@version", "ecs", "host"]
      rename => {"@timestamp" => "processTime"}
      id => "remove-unused-fields"
    }

    if ![type] { # if type field doesn't exists, do the mutate
      mutate { # if type field doesn't exits, I know it's a Java error
        add_field => {"type" => "JAVA_ERROR"}
        id => "add_java_error"
      }
    }

    if [type] == "LOGIN" {
      if [status] > 300 {
        mutate { 
          add_field => {"loginSuccessfull" => false}
          id => "login_success_false"
        }
      } else {
        mutate {
          add_field => {"loginSuccessfull" => true} 
          id => "login_success_true"
        }
      }

      translate {
        field => "status"
        destination => "status_meaning"
        dictionary => {
          "200" => "Login Correct"
          "201" => "Login Correct with Multiple Attempts"
          "202" => "Login Correct with Password changed"
          "204" => "Automated Login"
          "250" => "Login with Cookie"
          "150" => "Impersonated User"
          "400" => "User Blocked"
          "404" => "User Not Found"
          "500" => "Internal Server Error"
        }
        id => "translate_status"
      }

      geoip {
        source => "ip"
        id => "geoip"
      }
    }

    date { # by default it overrides @timestamp field, we can use target option to save this date in a custom field
      match => ["date", "YYYY-MM-dd HH:mm:ss"]
      id => "date"
    }
  }
}

output {
  if [application] == "log-generator" {
    if "_grokparsefailure" not in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "log-generator-%{+YYYY.MM.dd}"
        id => "out_elastic"
      }
    } else {
      stdout {
        id => "out_grok_failed"
      }
    }
  }
}
